{
  "language": "Solidity",
  "sources": {
    "contracts/Lock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.23;\n\n// Uncomment this line to use console.log\n//\n\nlibrary Errors {\n    error Lock_CallerNotOwner();\n    error Lock_CannotWithdrawYet();\n    error Lock_UnlockTimeShouldBeInTheFuture();\n}\n\ncontract Lock {\n    uint256 public unlockTime;\n    address payable public owner;\n\n    event Withdrawal(uint256 amount, uint256 when);\n\n    constructor(uint256 _unlockTime) payable {\n        if (block.timestamp >= _unlockTime) revert Errors.Lock_UnlockTimeShouldBeInTheFuture();\n\n        unlockTime = _unlockTime;\n        owner = payable(msg.sender);\n    }\n\n    function withdraw() public {\n        // Uncomment this line, and the import of \"hardhat/console.sol\", to print a log in your\n        // terminal\n\n\n        if (block.timestamp < unlockTime) revert Errors.Lock_CannotWithdrawYet();\n        if (msg.sender != owner) revert Errors.Lock_CallerNotOwner();\n\n        emit Withdrawal(address(this).balance, block.timestamp);\n\n        owner.transfer(address(this).balance);\n    }\n}\n"
    },
    "contracts/LockCreate3.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\n// Uncomment this line to use console.log\n//\n\ncontract Lock {\n    uint public unlockTime;\n    address payable public owner;\n\n    event Withdrawal(uint amount, uint when);\n\n    constructor(uint256 _unlockTime, address _owner) payable {\n        require(block.timestamp < _unlockTime, 'Unlock time should be in the future');\n        unlockTime = _unlockTime;\n        owner = payable(_owner);\n    }\n\n    function withdraw() public {\n        require(block.timestamp >= unlockTime, \"You can't withdraw yet\");\n        require(msg.sender == owner, \"You aren't the owner\");\n\n        emit Withdrawal(address(this).balance, block.timestamp);\n        owner.transfer(address(this).balance);\n    }\n}"
    },
    "contracts/LockInit.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\n// Uncomment this line to use console.log\n//\n\ncontract LockInit {\n    uint public unlockTime;\n    address payable public owner;\n\n    event Withdrawal(uint amount, uint when);\n\n    function initialize(uint256 _unlockTime) public payable {\n        require(block.timestamp < _unlockTime, \"Unlock time should be in the future\");\n        unlockTime = _unlockTime;\n        owner = payable(msg.sender);\n    }\n\n    function withdraw() public {\n        require(block.timestamp >= unlockTime, \"You can't withdraw yet\");\n        require(msg.sender == owner, \"You aren't the owner\");\n\n        emit Withdrawal(address(this).balance, block.timestamp);\n        owner.transfer(address(this).balance);\n    }\n}\n"
    }
  },
  "settings": {
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "cancun",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "libraries": {
      "": {
        "__CACHE_BREAKER__": "0x00000000d41867734bbee4c6863d9255b2b06ac1"
      }
    }
  }
}